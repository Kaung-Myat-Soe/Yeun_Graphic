---
layout: entry
title: 버전 관리, Git
description: 코드를 배우면서 Git 시스템으로 버전 관리 방법을 익히게 되었다. 이 Git 시스템은 생각을 확장하고, 효율적으로 작업하는 데 많은 도움이 되었다. Git은 코딩이나 개발자에게만 한정된 것이 아니라 "버전"을 관리해야하는 여러 분야에 유용하게 사용할 수 있는 개념이지만 비개발자에게는 생소한 시스템이라 공유하고자 한다.
publish: true
---

코드를 배우면서 Git 시스템으로 버전 관리 방법을 익히게 되었다. 이 Git 시스템은 생각을 확장하고, 효율적으로 작업하는 데 많은 도움이 되었다. Git은 코딩이나 개발자에게만 한정된 것이 아니라 "버전"을 관리해야하는 여러 분야에 유용하게 사용할 수 있는 개념이지만 비개발자에게는 생소한 시스템이라 공유하고자 한다.

## 버전 관리

디자인 작업을 하다보면 작업물이 진행되는 기록을 남겨야할 때가 있다. 잘못된 수정을 해서 과거로 돌아간다든가, 혹은 여러 안을 비교해보기 위해 A-0시안, A-1시안, A-2시안을 저장해둔다든가 하는 일은 일상다반사다. 이를 도와주는 가장 친숙한 예로는 Photoshop의 history 기능을 들 수 있다.

- Photoshop의 history 창

그러나 Photoshop에서 문서를 꺼버리면 history도 함께 날아간다. 그러므로 작업자는 거점이 될 수 있을 만한 시점에 파일을 "다른 이름으로 저장"하고, 그 결과 아래와 이미지와 같은 상황을 왕왕 맞이하게 된다.

- 최종의 최종의 최종의 최종의...

디자인뿐만 아니라 글도 초고, 퇴고, 탈고라는 과정을 거치며 점차적으로 발전하는 과정을 거치며 그 중간 과정을 저장해서 시점별로 독립적인 파일로 관리하게 된다. 잘은 모르지만 작곡이나, 번역, 설계 등의 창작 분야 전반에 걸쳐 이와 비슷한 양상을 쉽게 발견할 수 있으리라 생각한다.

창작물이 발전하는 과정을 관리할 수 있도록 기록으로 남기는 것을 "버전 관리"라고 한다. 만약 한번이라도 "진짜진짜진짜_최종.psd"를 만들어봤다면 이미 버전관리를 하고 있는 것이다. 하지만 이런 방식은 무척 귀찮고, 용량을 많이 차지하며, 작업자의 집요함에 많이 의존한다. 즉, 중간 과정을 따로 저장해두지 않았는데 "어제 버전이 더 낫다."라는 코멘트를 들었다면 기억에 의존해 작업물을 '어제'상태로 재창작 해야한다.





